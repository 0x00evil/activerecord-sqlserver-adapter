== Creating the test database

The default names for the test databases are "activerecord_unittest" and 
"activerecord_unittest2". If you want to use another database name then be sure 
to update the connection adapter setups you want to test with in 
test/connections/<your database>/connection.rb. 


== Requirements

The following gems need to be installed. Make sure you have gems.github.com as a
source. http://github.com/blog/97-github-loves-rubygems-1-2

  * gem install thoughbot-shoulda
  * gem install mocha

The tests of this adapter depend on the existence of rails edge. All the tests
defined by rails edge are re-used. For this to work the following directory 
structure is assumed to exist:

#{RAILS_ROOT}/vendor/plugins/adapters/sqlserver
#{RAILS_ROOT}/vendor/rails/activerecord/test

Define a user named 'rails' in SQL Server with all privileges granted. Use an empty 
password for user 'rails', or alternatively use the OSQLPASSWORD environment variable
which allows you to set a default password for the current session.

Then run "rake create_databases".


== Running with Rake

The easiest way to run the unit tests is through Rake. Either run "rake test_sqlserver" 
or "rake test_sqlserver_odbc". For more information, checkout the full array 
of rake tasks with "rake -T"

Rake can be found at http://rake.rubyforge.org


== Running with Autotest

Using autotest is easy, just run "autotest" and the tests will run continually in the 
same order as the rake test command. By default autotest will use ODBC connection. If 
you want to change this you can edit the autotest/sqlserver.rb file and set odbc_mode 
to false.

Lastly, you can run autotest on just the adapter specific tests with "autotest sqlserver". 
This will continuously run ONLY the SQL Sever specific behavior tests which are much 
quicker to run than the entire active record test suite.


== Running by hand

Unit tests are located in test directory. If you only want to run a single test suite, 
you can do so with:

   rake test_sqlserver TEST=base_test.rb
   
That'll run the base suite using the SQLServer-Ruby adapter.


== Expected Errors and Failures

Currently we expect the following errors from running the test suite:

1. ERROR in test_add_limit_offset_should_sanitize_sql_injection_for_limit_with_comas
   from
   activerecord/test/cases/adapter_test.rb
   
2. ERROR in test_add_limit_offset_should_sanitize_sql_injection_for_limit_without_comas
   from
   activerecord/test/cases/adapter_test.rb

3. Error:
   test_delegates_finds_and_calculations_to_the_base_class(NamedScopeTest):
   NoMethodError: undefined method `to_d' for 0:Fixnum
   http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1346-coerce-0-average-calculation-to-float


1. & 2. error because we treat the possible values for offset and limit much more 
aggressively than the intention of the tests.  Rails expects that limit => '1,7 bad sql'
would turn into ' limit 1,7' but that's not valid SQL Server syntax so why should we 
bother?  So we just deny non-integer limit / offset params entirely rather than trying
to sanitize them.  It's a hard-line to take on sql injection, but probably a safer one.

We do however have our own offset and limit tests in test/cases/offset_and_limit_test_sqlserver
that test our expected behaviour.


