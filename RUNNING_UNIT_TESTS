
= TL;DR

  * Setup two databases in SQL Server, [activerecord_unittest] and [activerecord_unittest2]
  * Create a [rails] user with an empty password and give it admin perms to both DBs.
  * $ git clone git://github.com/rails-sqlserver/activerecord-sqlserver-adapter.git
  * $ bundle install
  * $ bundle exec rake test

  
= Creating the test databases

The default names for the test databases are "activerecord_unittest" and 
"activerecord_unittest2". If you want to use another database name then be sure 
to update the connection file that matches your connection method in 
test/connections/native_sqlserver_<connection_method>/connection.rb. Define a 
user named 'rails' in SQL Server with all privileges granted for the test 
databases. Use an empty password for said user.

The connection files make certain assumptions. For instance, the ODBC 
connection assumes you have a DSN setup that matches the name of the default 
database names. Remember too you have to set an environment variable for the 
DSN of the adapter, see the connection.rb file that matches your connection 
mode for details.


= Cloning The Repos

Clone adapter git://github.com/rails-sqlserver/activerecord-sqlserver-adapter.git. 
The master branch is the one under development for rails 3, track the repos 2-3-stable 
branch for 2.x development.

The tests of this adapter depend on the existence of the rails which under the 3.1 
version and above is automatically cloned for you with bundler. However you can clone
rails from git://github.com/rails/rails.git and set the RAILS_SOURCE environment 
variable so bundler will use another local path instead.

  $ git clone git://github.com/rails-sqlserver/activerecord-sqlserver-adapter.git


= Bundling

Now with that out of the way you can run "bundle install" to hook everything up. 
Our tests use bundler to setup the load paths correctly. The default mode is DBLIB
using TinyTDS. It is important to use bundle exec so we can wire up the ActiveRecord
test libs correctly.

  $ bundle exec rake test


= Testing Options

The Gemfile contains groups for :tinytds and :odbc. By default it will install both gems 
which allows you to run the full test suite in either connection mode. If for some reason 
any one of these is problematic or of no concern, you could always opt out of bundling 
either gem with something like this.

  $ bundle install --without odbc

You can run different connection modes using the following rake commands. Again, the 
DBLIB connection mode using TinyTDS is the default test task.

  $ bundle exec rake test:dblib
  $ bundle exec rake test:odbc

By default, Bundler will download the rails git repo and use the git tag that matches 
the dependency version in our gemspec. If you want to test another version of rails, 
you can either temporarily change the :tag for rails in the Gemfile. Likewise, you can
clone the rails repo your self to another directory and use the RAILS_SOURCE environment 
variable.


= Current Expected Failures

* Misc Date/Time object instance matches when using ODBC mode.


