== Creating the test database

The default names for the test databases are "activerecord_unittest" and 
"activerecord_unittest2". If you want to use another database name then be sure 
to update the connection adapter setups you want to test with in 
test/connections/<your database>/connection.rb. 


== Requirements

The tests of this adapter depend on the existence of rails edge. All the tests
defined by rails edge are re-used. For this to work the following directory 
structure is assumed to exist:

#{RAILS_ROOT}/vendor/plugins/adapters/sqlserver
#{RAILS_ROOT}/vendor/rails/activerecord/test

Define a user named 'rails' in SQL Server with all privileges granted. Use an empty 
password for user 'rails', or alternatively use the OSQLPASSWORD environment variable
which allows you to set a default password for the current session.

Then run "rake create_databases".


== Running with Rake

The easiest way to run the unit tests is through Rake. Either run "rake test_sqlserver" 
or "rake test_sqlserver_odbc". For more information, checkout the full array 
of rake tasks with "rake -T"

Rake can be found at http://rake.rubyforge.org


== Running by hand

Unit tests are located in test directory. If you only want to run a single test suite, 
you can do so with:

   rake test_sqlserver TEST=base_test.rb
   
That'll run the base suite using the SQLServer-Ruby adapter.

== Expected Errors

Currently we expect the following errors from running the test suite:

1. test_add_limit_offset_should_sanitize_sql_injection_for_limit_with_comas
   from
   activerecord/test/cases/adapter_test.rb
   
2. test_add_limit_offset_should_sanitize_sql_injection_for_limit_without_comas
   from
   activerecord/test/cases/adapter_test.rb
   
1. & 2. error because we treat the possible values for offset and limit much more 
aggressively than the intention of the tests.  Rails expects that limit => '1,7 bad sql'
would turn into ' limit 1,7' but that's not valid SQL Server syntax so why should we 
bother?  So we just deny non-integer limit / offset params entirely rather than trying
to sanitize them.  It's a hard-line to take on sql injection, but probably a safer one.